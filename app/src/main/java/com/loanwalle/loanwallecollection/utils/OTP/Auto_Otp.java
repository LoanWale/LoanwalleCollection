package com.loanwalle.loanwallecollection.utils.OTP;import android.Manifest;import android.app.ProgressDialog;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.content.SharedPreferences;import android.content.pm.PackageManager;import android.graphics.Color;import android.graphics.drawable.ColorDrawable;import android.os.Build;import android.os.Bundle;import android.os.CountDownTimer;import android.text.Editable;import android.text.TextWatcher;import android.util.Log;import android.view.Gravity;import android.view.LayoutInflater;import android.view.View;import android.widget.Button;import android.widget.LinearLayout;import android.widget.TextView;import android.widget.Toast;import androidx.appcompat.app.AlertDialog;import androidx.appcompat.app.AppCompatActivity;import androidx.localbroadcastmanager.content.LocalBroadcastManager;import com.android.volley.Request;import com.android.volley.RequestQueue;import com.android.volley.toolbox.StringRequest;import com.android.volley.toolbox.Volley;import com.chaos.view.PinView;import com.google.android.gms.auth.api.phone.SmsRetriever;import com.google.android.gms.auth.api.phone.SmsRetrieverClient;import com.google.android.gms.tasks.Task;import com.loanwalle.loanwallecollection.R;import org.jetbrains.annotations.NotNull;import org.json.JSONObject;import java.util.HashMap;import java.util.Map;public class Auto_Otp extends AppCompatActivity implements        SMSReceiver.OTPReceiveListener {    public static final String TAG = "tag";    private static final int PERMISSION_REQUEST_READ_PHONE_STATE = 1;    TextView txtnumber, mgs;    String a, mob;    RequestQueue requestQueue;    PinView pinView;    SharedPreferences sharedPreferences;    SharedPreferences.Editor editor;    private SMSReceiver smsReceiver;    TextView otp1, texttimer, submit, veribycall;    LinearLayout linerback, otplayout, calling;    CountDownTimer coountdow;    String Exotelnumber;    String type = "mgs";    ProgressDialog progressDialog;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_auto__otp);        requestQueue = Volley.newRequestQueue(this);        Timer_Startfrontimage();        otp1 = findViewById(R.id.otp);        mgs = findViewById(R.id.mgs);        otplayout = findViewById(R.id.otplayout);        veribycall = findViewById(R.id.veribycall);        calling = findViewById(R.id.calling);        pinView = findViewById(R.id.pinView);        texttimer = findViewById(R.id.texttimer);        submit = findViewById(R.id.submit);        linerback = findViewById(R.id.linerback);        txtnumber = findViewById(R.id.txtnumber);        submit.setEnabled(false);        a = getIntent().getStringExtra("tosend");        sharedPreferences = getSharedPreferences("USER_ID", MODE_PRIVATE);        editor = sharedPreferences.edit();        editor.apply();        ///txtnumber.setText("+91-"+ getIntent().getStringExtra("mobile"));        mob = getIntent().getStringExtra("mobile");        txtnumber.setText("+91-" + mob);        AppSignatureHashHelper appSignatureHashHelper = new AppSignatureHashHelper(Auto_Otp.this);        // This code requires one time to get Hash keys do comment and share key                                          Log.e(TAG, "Apps Hash Key: " + appSignatureHashHelper.getAppSignatures().get(0));        texttimer.setOnClickListener(v -> Timer_Startfrontimage());        linerback.setOnClickListener(v -> finish());        submit.setOnClickListener(v -> {            if (pinView.getText().toString().equals("") || pinView.getText().toString().equals(null)) {                pinView.setError("Please enter otp");                pinView.requestFocus();            } else {                if (a.equals("1")) {                }            }        });        pinView.setOnClickListener(v -> {            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {                pinView.setShowSoftInputOnFocus(true);            }        });        int version = Integer.parseInt(Build.VERSION.SDK);        //  Log.e("versiong", String.valueOf(version));        startSMSListener();        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {            if (checkSelfPermission(Manifest.permission.READ_PHONE_STATE) == PackageManager.PERMISSION_DENIED || checkSelfPermission(Manifest.permission.CALL_PHONE) == PackageManager.PERMISSION_DENIED) {                String[] permissions = {Manifest.permission.READ_PHONE_STATE, Manifest.permission.CALL_PHONE};                requestPermissions(permissions, PERMISSION_REQUEST_READ_PHONE_STATE);            }        }    }    private void startSMSListener() {        try {            smsReceiver = new SMSReceiver();            smsReceiver.setOTPListener(this);            IntentFilter intentFilter = new IntentFilter();            intentFilter.addAction(SmsRetriever.SMS_RETRIEVED_ACTION);            Auto_Otp.this.registerReceiver(smsReceiver, intentFilter);            SmsRetrieverClient client = SmsRetriever.getClient(this);            Task<Void> task = client.startSmsRetriever();            task.addOnSuccessListener(aVoid -> {                // API successfully started            });            task.addOnFailureListener(e -> {                // Fail to start API            });        } catch (Exception e) {            e.printStackTrace();        }    }    @Override    public void onOTPReceived(String otp) {        //  showToast("OTP Received: " + otp);        otp1.setText(otp);        pinView.setText("");        pinView.setText(otp.substring(15, 21));        submit.setBackgroundColor(getResources().getColor(R.color.button_color));        //texttimer.setText("Resend");        submit.setEnabled(true);        coountdow.cancel();         texttimer.setEnabled(true);//        if (a.equals("1")) {////           getLoginVerify(pinView.getText().toString());////        } else {////            getPhoneverification(pinView.getText().toString());////        }        if (smsReceiver != null) {            Auto_Otp.this.unregisterReceiver(smsReceiver);            LocalBroadcastManager.getInstance(this).unregisterReceiver(smsReceiver);        }    }    @Override    public void onOTPTimeOut() {        // showToast("OTP Time out");    }    @Override    public void onOTPReceivedError(String error) {        // showToast(error);    }    @Override    protected void onDestroy() {        super.onDestroy();        if (smsReceiver != null) {            LocalBroadcastManager.getInstance(this).unregisterReceiver(smsReceiver);        }    }    void Timer_Startfrontimage()    {        coountdow = new CountDownTimer(40000, 1000) {            public void onTick(long millisUntilFinished) {                texttimer.setText("Resend in " + millisUntilFinished / 1000 + " Sec");                //here you can have your logic to set text to edittext                // submit.setBackgroundColor(getResources().getColor(R.color.gray));                texttimer.setEnabled(false);            }            public void  onFinish() {                texttimer.setText("Resend OTP");                submit.setBackgroundColor(getResources().getColor(R.color.button_color));                texttimer.setEnabled(true);                submit.setEnabled(true);            }        }.start();    }    @Override    public void onBackPressed() {        finish();        super.onBackPressed();    }    @Override    public void onResume() {        super.onResume();    }    @Override    public void onPause() {        super.onPause();    }    @Override    protected void onStop() {        super.onStop();    }    @Override    public void onRequestPermissionsResult(int requestCode, @NotNull String[] permissions, @NotNull int[] grantResults) {        // Toast.makeText(this, "Permission granted: " + PERMISSION_REQUEST_READ_PHONE_STATE, Toast.LENGTH_SHORT).show();        // Toast.makeText(this, "Permission NOT granted: " + PERMISSION_REQUEST_READ_PHONE_STATE, Toast.LENGTH_SHORT).show();    }}
Index: app/src/main/java/com/loanwalle/loanwallecollection/ui/main/viewmodel/TokenViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.loanwalle.loanwallecollection.ui.main.viewmodel\n\nimport android.app.Application\nimport androidx.lifecycle.AndroidViewModel\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.viewModelScope\nimport com.loanwalle.loanwallecollection.R\nimport com.loanwalle.loanwallecollection.app.MyApplication\nimport com.loanwalle.loanwallecollection.data.model.token.TokenRequest\nimport com.loanwalle.loanwallecollection.data.model.token.TokenResponse\nimport com.loanwalle.loanwallecollection.data.repository.AppRepository\nimport com.loanwalle.loanwallecollection.utils.Event\nimport com.loanwalle.loanwallecollection.utils.Resource\nimport com.loanwalle.loanwallecollection.utils.Utils\nimport kotlinx.coroutines.launch\nimport retrofit2.Response\nimport java.io.IOException\n\nclass TokenViewModel(\n    app: Application,\n    private val appRepository: AppRepository\n) : AndroidViewModel(app) {\n\n    private val _loginResponse = MutableLiveData<Event<Resource<TokenResponse>>>()\n    val loginResponse:LiveData<Event<Resource<TokenResponse>>> = _loginResponse\n\n\n    fun loginUser(body: TokenRequest) = viewModelScope.launch {\n        login(body)\n    }\n\n\n\n\n    private suspend fun login(body: TokenRequest) {\n        _loginResponse.postValue(Event(Resource.Loading()))\n        try {\n            if (Utils.hasInternetConnection(getApplication<MyApplication>())) {\n                val response = appRepository.updateToken(body)\n               _loginResponse.postValue(handlePicsResponse(response))\n            } else {\n                _loginResponse.postValue(Event(Resource.Error(getApplication<MyApplication>().getString(R.string.no_internet_connection))))\n            }\n        } catch (t: Throwable) {\n            when (t) {\n                is IOException -> {\n                    _loginResponse.postValue(\n                        Event(Resource.Error(\n                            getApplication<MyApplication>().getString(\n                                R.string.network_failure\n                            )\n                        ))\n                    )\n                }\n                else -> {\n                    _loginResponse.postValue(\n                        Event(Resource.Error(\n                            getApplication<MyApplication>().getString(\n                                R.string.conversion_error\n                            )\n                        ))\n                    )\n                }\n            }\n        }\n    }\n\n    private fun handlePicsResponse(response: Response<TokenResponse>): Event<Resource<TokenResponse>>? {\n        if (response.isSuccessful) {\n            response.body()?.let { resultResponse ->\n                return Event(Resource.Success(resultResponse))\n            }\n        }\n        return Event(Resource.Error(response.message()))\n    }\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/loanwalle/loanwallecollection/ui/main/viewmodel/TokenViewModel.kt b/app/src/main/java/com/loanwalle/loanwallecollection/ui/main/viewmodel/TokenViewModel.kt
--- a/app/src/main/java/com/loanwalle/loanwallecollection/ui/main/viewmodel/TokenViewModel.kt	(revision d29dce0f53850fe412d29781569d5aa1eadbc7b8)
+++ b/app/src/main/java/com/loanwalle/loanwallecollection/ui/main/viewmodel/TokenViewModel.kt	(date 1625561036384)
@@ -22,8 +22,8 @@
     private val appRepository: AppRepository
 ) : AndroidViewModel(app) {
 
-    private val _loginResponse = MutableLiveData<Event<Resource<TokenResponse>>>()
-    val loginResponse:LiveData<Event<Resource<TokenResponse>>> = _loginResponse
+    private val _TokenResponse = MutableLiveData<Event<Resource<TokenResponse>>>()
+    val loginResponse:LiveData<Event<Resource<TokenResponse>>> = _TokenResponse
 
 
     fun loginUser(body: TokenRequest) = viewModelScope.launch {
@@ -34,18 +34,18 @@
 
 
     private suspend fun login(body: TokenRequest) {
-        _loginResponse.postValue(Event(Resource.Loading()))
+        _TokenResponse.postValue(Event(Resource.Loading()))
         try {
             if (Utils.hasInternetConnection(getApplication<MyApplication>())) {
                 val response = appRepository.updateToken(body)
-               _loginResponse.postValue(handlePicsResponse(response))
+               _TokenResponse.postValue(handlePicsResponse(response))
             } else {
-                _loginResponse.postValue(Event(Resource.Error(getApplication<MyApplication>().getString(R.string.no_internet_connection))))
+                _TokenResponse.postValue(Event(Resource.Error(getApplication<MyApplication>().getString(R.string.no_internet_connection))))
             }
         } catch (t: Throwable) {
             when (t) {
                 is IOException -> {
-                    _loginResponse.postValue(
+                    _TokenResponse.postValue(
                         Event(Resource.Error(
                             getApplication<MyApplication>().getString(
                                 R.string.network_failure
@@ -54,7 +54,7 @@
                     )
                 }
                 else -> {
-                    _loginResponse.postValue(
+                    _TokenResponse.postValue(
                         Event(Resource.Error(
                             getApplication<MyApplication>().getString(
                                 R.string.conversion_error
Index: app/src/main/java/com/loanwalle/loanwallecollection/ui/main/view/Activity/HomePageActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.loanwalle.loanwallecollection.ui.main.view.Activity\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.util.Log\nimport android.view.View\nimport android.widget.Toast\nimport androidx.lifecycle.Observer\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.view.isVisible\nimport androidx.lifecycle.ViewModelProvider\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.google.android.material.snackbar.Snackbar\nimport com.loanwalle.loanwallecollection.R\nimport com.loanwalle.loanwallecollection.data.model.todaylead.TodayleadRequ\nimport com.loanwalle.loanwallecollection.data.model.userProfile.UserProfileBody\nimport com.loanwalle.loanwallecollection.data.repository.AppRepository\nimport com.loanwalle.loanwallecollection.databinding.ActivityHomePageBinding\nimport com.loanwalle.loanwallecollection.ui.base.ViewModelProviderFactory\nimport com.loanwalle.loanwallecollection.ui.main.adapter.TodayLeadAdp\nimport com.loanwalle.loanwallecollection.ui.main.viewmodel.TodayLeadViewModel\nimport com.loanwalle.loanwallecollection.ui.main.viewmodel.UserProfileViewModel\nimport com.loanwalle.loanwallecollection.utils.Resource\nimport com.loanwalle.loanwallecollection.utils.SessionManegar\nimport com.loanwalle.loanwallecollection.utils.errorSnack\nimport kotlinx.android.synthetic.main.activity_home_page.*\nimport kotlinx.android.synthetic.main.activity_home_page.Verification_layout\nimport kotlinx.android.synthetic.main.activity_home_page.back_layout\nimport kotlinx.android.synthetic.main.activity_home_page.btn_collection\nimport kotlinx.android.synthetic.main.activity_home_page.btn_verification\nimport kotlinx.android.synthetic.main.activity_home_page.verify\nimport kotlinx.android.synthetic.main.activity_otp.*\nimport kotlinx.android.synthetic.main.activity_otp.progress\nimport kotlinx.android.synthetic.main.activity_total_leads.*\nimport java.util.*\n\nclass HomePageActivity : AppCompatActivity() {\n    var binding: ActivityHomePageBinding? = null\n    lateinit var userProfileViewModel : UserProfileViewModel\n    private lateinit var viewModel: TodayLeadViewModel\n    val sessionManegar = SessionManegar()\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = ActivityHomePageBinding.inflate(layoutInflater)\n        setContentView(binding!!.root)\n        init()\n\n      sessionManegar.getBoolean(this,\"checked\")\n\n//        collection_layout!!.visibility= View.VISIBLE\n//        Verification_layout!!.visibility= View.GONE\n\n//        binding!!.collid.setOnClickListener{\n//            val intent1 = Intent(this,LoanDetailActivity::class.java)\n//            startActivity(intent1)\n//        }\n\n\n        btn_collection!!.setOnClickListener{\n            Verification_layout!!.visibility=View.GONE\n            rec_todaycollection!!.visibility=View.VISIBLE\n            btn_collection!!.setBackgroundResource(R.drawable.paytmbutton)\n            btn_verification!!.setBackgroundResource(R.drawable.graybackground)\n        }\n\n        btn_verification!!.setOnClickListener{\n            Verification_layout!!.visibility=View.VISIBLE\n            rec_todaycollection!!.visibility=View.GONE\n            btn_verification!!.setBackgroundResource(R.drawable.paytmbutton)\n            btn_collection!!.setBackgroundResource(R.drawable.graybackground)\n        }\n\n        back_layout!!.setOnClickListener{\n            //  Toast.makeText(this@HomeActivity,\"today leads\",Toast.LENGTH_LONG).show()\n            val i = Intent(this@HomePageActivity, Navigation::class.java)\n            startActivity(i)\n          //  finish()\n\n        }\n\n\n//        collid!!.setOnClickListener{\n//            //  Toast.makeText(this@HomeActivity,\"today leads\",Toast.LENGTH_LONG).show()\n//            val i = Intent(this@HomePageActivity, LoanDetailActivity::class.java)\n//            startActivity(i)\n//\n//        }\n\n\n        verify!!.setOnClickListener{\n            //  Toast.makeText(this@HomeActivity,\"today leads\",Toast.LENGTH_LONG).show()\n            val i = Intent(this@HomePageActivity, Verification::class.java)\n            startActivity(i)\n\n\n        }\n\n    }\n\n\n    private fun init() {\n        rec_todaycollection.setHasFixedSize(true)\n        rec_todaycollection.layoutManager = LinearLayoutManager(this)\n        setupViewModel()\n    }\n\n    private fun setupViewModel() {\n        val repository = AppRepository()\n        val factory = ViewModelProviderFactory(application, repository)\n        viewModel = ViewModelProvider(this, factory).get(TodayLeadViewModel::class.java)\n        userProfileViewModel = ViewModelProvider(this, factory).get(UserProfileViewModel::class.java)\n        getTodayLead()\n    }\n\n    fun getTodayLead() {\n        val userid = sessionManegar.getString(this,sessionManegar.USER_ID)\n        if (userid!=null) {\n            val body = TodayleadRequ.LeadRequest(userid)\n            viewModel.todaylead(body)\n            viewModel.leadResponse.observe(this, Observer { event ->\n                event.getContentIfNotHandled()?.let { response ->\n                    when (response) {\n                        is Resource.Success -> {\n                            hideProgressBar()\n                            response.data?.let { otpResponse ->\n                                val message:String= otpResponse!!.message\n                                Log.e(\"Resopncelogin\",otpResponse.toString());\n                                val status = otpResponse!!.data\n                                if (status.isEmpty()){\n                                   binding!!.noDataFound.isVisible = true\n                                    binding!!.VerificationLayout.isVisible = false\n                                }else{\n                                    binding!!.noDataFound.isVisible = false\n                                    binding!!.VerificationLayout.isVisible = true\n                                }\n                                val picsAdapter = status?.let {\n                                    TodayLeadAdp(this@HomePageActivity, it)\n\n                                }\n                                //progress4.errorSnack(message, Snackbar.LENGTH_LONG)\n                                rec_todaycollection.adapter = picsAdapter\n\n\n\n                            }\n                        }\n\n                        is Resource.Error -> {\n                            hideProgressBar()\n                            response.message?.let { message ->\n                                progress4.errorSnack(message, Snackbar.LENGTH_LONG)\n                            }\n                        }\n\n                        is Resource.Loading -> {\n                            showProgressBar()\n                        }\n                    }\n                }\n            })\n        }\n\n    }\n\n    fun hideProgressBar() {\n        progress4.visibility = View.GONE\n    }\n    fun showProgressBar() {\n        progress4.visibility = View.VISIBLE\n    }\n\n    fun UpdateToken ()\n\n    {\n\n    }\n\n    }\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/loanwalle/loanwallecollection/ui/main/view/Activity/HomePageActivity.kt b/app/src/main/java/com/loanwalle/loanwallecollection/ui/main/view/Activity/HomePageActivity.kt
--- a/app/src/main/java/com/loanwalle/loanwallecollection/ui/main/view/Activity/HomePageActivity.kt	(revision d29dce0f53850fe412d29781569d5aa1eadbc7b8)
+++ b/app/src/main/java/com/loanwalle/loanwallecollection/ui/main/view/Activity/HomePageActivity.kt	(date 1625561484216)
@@ -12,14 +12,20 @@
 import androidx.recyclerview.widget.LinearLayoutManager
 import com.google.android.material.snackbar.Snackbar
 import com.loanwalle.loanwallecollection.R
+import com.loanwalle.loanwallecollection.data.model.loginResponse.RequestBodies
 import com.loanwalle.loanwallecollection.data.model.todaylead.TodayleadRequ
+import com.loanwalle.loanwallecollection.data.model.token.TokenRequest
 import com.loanwalle.loanwallecollection.data.model.userProfile.UserProfileBody
 import com.loanwalle.loanwallecollection.data.repository.AppRepository
 import com.loanwalle.loanwallecollection.databinding.ActivityHomePageBinding
 import com.loanwalle.loanwallecollection.ui.base.ViewModelProviderFactory
 import com.loanwalle.loanwallecollection.ui.main.adapter.TodayLeadAdp
+import com.loanwalle.loanwallecollection.ui.main.viewmodel.tokenViewModel
 import com.loanwalle.loanwallecollection.ui.main.viewmodel.TodayLeadViewModel
+import com.loanwalle.loanwallecollection.ui.main.viewmodel.TokenViewModel
 import com.loanwalle.loanwallecollection.ui.main.viewmodel.UserProfileViewModel
+import com.loanwalle.loanwallecollection.util.Constants
+import com.loanwalle.loanwallecollection.utils.ConstantsSave
 import com.loanwalle.loanwallecollection.utils.Resource
 import com.loanwalle.loanwallecollection.utils.SessionManegar
 import com.loanwalle.loanwallecollection.utils.errorSnack
@@ -29,6 +35,7 @@
 import kotlinx.android.synthetic.main.activity_home_page.btn_collection
 import kotlinx.android.synthetic.main.activity_home_page.btn_verification
 import kotlinx.android.synthetic.main.activity_home_page.verify
+import kotlinx.android.synthetic.main.activity_login.*
 import kotlinx.android.synthetic.main.activity_otp.*
 import kotlinx.android.synthetic.main.activity_otp.progress
 import kotlinx.android.synthetic.main.activity_total_leads.*
@@ -38,6 +45,7 @@
     var binding: ActivityHomePageBinding? = null
     lateinit var userProfileViewModel : UserProfileViewModel
     private lateinit var viewModel: TodayLeadViewModel
+    private lateinit var tokenViewModel: TokenViewModel
     val sessionManegar = SessionManegar()
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
@@ -109,6 +117,8 @@
         val factory = ViewModelProviderFactory(application, repository)
         viewModel = ViewModelProvider(this, factory).get(TodayLeadViewModel::class.java)
         userProfileViewModel = ViewModelProvider(this, factory).get(UserProfileViewModel::class.java)
+        tokenViewModel = ViewModelProvider(this, factory).get(TokenViewModel::class.java)
+
         getTodayLead()
     }
 
@@ -169,12 +179,69 @@
         progress4.visibility = View.VISIBLE
     }
 
-    fun UpdateToken ()
+    // update fibase token
+   public fun UpdateToken ()
+    {
+
+    }
+    
+    fun onLoginClick(view: View) {
+        val mobilenono = mobileno.text.toString()
+        val password = password_new.text.toString()
+        if (mobilenono.isNotEmpty() && password.isNotEmpty()) {
+            val body = TokenRequest(
+                token,
+                user_id)
+            tokenViewModel.loginUser(body)
+            tokenViewModel.loginResponse.observe(this, Observer { event ->
+                event.getContentIfNotHandled()?.let { response ->
+                    when (response) {
+
+                        is Resource.Success -> {
+                            hideProgressBar()
+                            response.data?.let { loginResponse ->
+                                val message:String= loginResponse.message
+                                Log.e("Resopncelogin",message);
+                                if (message.equals("success!")&&loginResponse.USERID!=null)
+                                {
+                                    progress.errorSnack(message, Snackbar.LENGTH_LONG)
+                                    sessionManegar.saveInt(this@LoginActivity,sessionManegar.LOGIN_STATE,
+                                        ConstantsSave.LoginFlow.Otpscreen)
+                                    sessionManegar.saveString(this@LoginActivity,
+                                        Constants.USER_ID,loginResponse.USERID)
+                                    sessionManegar.saveString(this@LoginActivity,
+                                        Constants.USER_MOBILE,mobilenono)
+                                    Intent(this@LoginActivity, OtpActivity::class.java).also {
+                                        it.putExtra(Constants.USER_MOBILE,mobilenono)
+                                        startActivity(it)
+                                        finish()
+                                    }
+                                }else
 
-    {
+                                {
+                                    progress.errorSnack(message, Snackbar.LENGTH_LONG)
+                                }
+
+
+                            }
+                        }
 
+                        is Resource.Error -> {
+                            hideProgressBar()
+                            response.message?.let { message ->
+                                progress.errorSnack(message, Snackbar.LENGTH_LONG)
+                            }
+                        }
+
+                        is Resource.Loading -> {
+                            showProgressBar()
+                        }
+                    }
+                }
+            })
+        }
     }
-
+    
     }
 
 
